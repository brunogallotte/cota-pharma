generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String             @unique @db.VarChar(255)
  name             String             @db.VarChar(100)
  cnpj             String             @unique @db.VarChar(100)
  phone            String             @db.VarChar(100)
  type             USER_TYPE          @default(pharmacy)
  is_confirmed     Boolean            @default(false)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @db.Timestamp(6)
  password         String
  pharmacyInvoices PharmacyInvoices[]
  supplierCatalog  SupplierCatalog[]
  userInfo         UserInfo[]

  @@map("users")
}

model Assets {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                  @unique @db.VarChar(255)
  dcb                    String?                 @db.VarChar(100)
  status                 ASSET_STATUS            @default(pending_review)
  description            String?
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @db.Timestamptz(6)
  pharmacyInvoicesAssets PharmacyInvoiceAssets[]
  supplierCatalog        SupplierCatalog[]

  @@map("assets")
}

model SupplierCatalog {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  asset_id   String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  assets     Assets    @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, asset_id], map: "unique_supplier_asset")
  @@index([user_id], map: "idx_supplier_catalog_user_id")
  @@map("supplier_catalog")
}

model UserInfo {
  id                       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String  @db.Uuid
  zip_code                 String? @db.VarChar(255)
  city                     String? @db.VarChar(255)
  number                   String? @db.VarChar(255)
  street                   String? @db.VarChar(255)
  state                    String? @db.VarChar(255)
  verification_email_token String? @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password_recovery_token  String? @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                     User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("users_info")
}

model PharmacyInvoices {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String                  @db.Uuid
  status                 PHARMACY_INVOICE_STATUS @default(pending)
  value                  Decimal                 @db.Decimal
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  user                   User                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pharmacyInvoicesAssets PharmacyInvoiceAssets[]

  @@index([user_id], map: "idx_pharmacy_invoices_user_id")
  @@map("pharmacy_invoices")
}

model PharmacyInvoiceAssets {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id       String           @db.Uuid
  asset_id         String           @db.Uuid
  quantity         Decimal          @db.Decimal
  assets           Assets           @relation(fields: [asset_id], references: [id], onUpdate: NoAction)
  pharmacyInvoices PharmacyInvoices @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([asset_id], map: "idx_pharmacy_invoices_assets_asset_id")
  @@index([invoice_id], map: "idx_pharmacy_invoices_assets_invoice_id")
  @@map("pharmacy_invoices_assets")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model trackeamento_trafego {
  id           Int       @id @default(autoincrement())
  fullname     String?   @db.VarChar(255)
  email        String?   @db.VarChar(255)
  utm_source   String?   @db.VarChar(255)
  utm_campaign String?   @db.VarChar(255)
  utm_medium   String?   @db.VarChar(255)
  utm_content  String?   @db.VarChar(255)
  utm_term     String?   @db.VarChar(255)
  utm_site     String?   @db.VarChar(255)
  device       String?   @db.VarChar(100)
  url          String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
}

enum USER_TYPE {
  pharmacy
  supplier
}

enum ASSET_STATUS {
  approved
  pending_review
}

enum PHARMACY_INVOICE_STATUS {
  pending
  paid
}
