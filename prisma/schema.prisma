generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String              @unique @db.VarChar(255)
  name              String?             @db.VarChar(100)
  cnpj              String?             @unique @db.VarChar(100)
  phone             String?             @db.VarChar(100)
  type              user_type           @default(pharmacy)
  is_confirmed      Boolean             @default(false)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @db.Timestamp(6)
  password          String?
  pharmacy_invoices pharmacy_invoices[]
  supplier_catalog  supplier_catalog[]
  user_info         user_info[]
}

model assets {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @unique @db.VarChar(255)
  dcb                      String?                    @db.VarChar(100)
  status                   asset_status               @default(pending_review)
  description              String?
  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                  @db.Timestamptz(6)
  pharmacy_invoices_assets pharmacy_invoices_assets[]
  supplier_catalog         supplier_catalog[]
}

model supplier_catalog {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  asset_id   String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  assets     assets    @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, asset_id], map: "unique_supplier_asset")
  @@index([user_id], map: "idx_supplier_catalog_user_id")
}

model user_info {
  id                       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String  @db.Uuid
  zip_code                 String? @db.VarChar(255)
  city                     String? @db.VarChar(255)
  number                   String? @db.VarChar(255)
  street                   String? @db.VarChar(255)
  state                    String? @db.VarChar(255)
  verification_email_token String? @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password_recovery_token  String? @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users                    users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model pharmacy_invoices {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String                     @db.Uuid
  status                   pharmacy_invoice_status    @default(pending)
  value                    Decimal                    @db.Decimal
  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  users                    users                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pharmacy_invoices_assets pharmacy_invoices_assets[]

  @@index([user_id], map: "idx_pharmacy_invoices_user_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model pharmacy_invoices_assets {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id        String            @db.Uuid
  asset_id          String            @db.Uuid
  quantity          Decimal           @db.Decimal
  assets            assets            @relation(fields: [asset_id], references: [id], onUpdate: NoAction)
  pharmacy_invoices pharmacy_invoices @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([asset_id], map: "idx_pharmacy_invoices_assets_asset_id")
  @@index([invoice_id], map: "idx_pharmacy_invoices_assets_invoice_id")
}

enum user_type {
  pharmacy
  supplier
}

enum asset_status {
  approved
  pending_review
}

enum pharmacy_invoice_status {
  pending
  paid
}
